// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: egress.proto

package com.appdynamics.extensions.pcffirehose.consumer.loggregator.v2;

public final class LoggregatorEgress {
  private LoggregatorEgress() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface EgressRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:loggregator.v2.EgressRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * shard_id instructs Loggregator to shard envelopes between other
     * subscriptions with the same shard_id. Loggregator will do its best to
     * split the load evenly between subscriptions with the same shard_id.
     * </pre>
     *
     * <code>string shard_id = 1;</code>
     */
    String getShardId();
    /**
     * <pre>
     * shard_id instructs Loggregator to shard envelopes between other
     * subscriptions with the same shard_id. Loggregator will do its best to
     * split the load evenly between subscriptions with the same shard_id.
     * </pre>
     *
     * <code>string shard_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getShardIdBytes();

    /**
     * <pre>
     * TODO: This can be removed once selector has been around long enough.
     * </pre>
     *
     * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
     */
    boolean hasLegacySelector();
    /**
     * <pre>
     * TODO: This can be removed once selector has been around long enough.
     * </pre>
     *
     * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
     */
    Selector getLegacySelector();
    /**
     * <pre>
     * TODO: This can be removed once selector has been around long enough.
     * </pre>
     *
     * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
     */
    SelectorOrBuilder getLegacySelectorOrBuilder();

    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    java.util.List<Selector>
        getSelectorsList();
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    Selector getSelectors(int index);
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    int getSelectorsCount();
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    java.util.List<? extends SelectorOrBuilder>
        getSelectorsOrBuilderList();
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    SelectorOrBuilder getSelectorsOrBuilder(
            int index);

    /**
     * <pre>
     * TODO: This can be removed once the envelope.deprecated_tags is removed.
     * </pre>
     *
     * <code>bool use_preferred_tags = 3;</code>
     */
    boolean getUsePreferredTags();
  }
  /**
   * Protobuf type {@code loggregator.v2.EgressRequest}
   */
  public  static final class EgressRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:loggregator.v2.EgressRequest)
      EgressRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EgressRequest.newBuilder() to construct.
    private EgressRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EgressRequest() {
      shardId_ = "";
      selectors_ = java.util.Collections.emptyList();
      usePreferredTags_ = false;
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private EgressRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              String s = input.readStringRequireUtf8();

              shardId_ = s;
              break;
            }
            case 18: {
              Selector.Builder subBuilder = null;
              if (legacySelector_ != null) {
                subBuilder = legacySelector_.toBuilder();
              }
              legacySelector_ = input.readMessage(Selector.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(legacySelector_);
                legacySelector_ = subBuilder.buildPartial();
              }

              break;
            }
            case 24: {

              usePreferredTags_ = input.readBool();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                selectors_ = new java.util.ArrayList<Selector>();
                mutable_bitField0_ |= 0x00000004;
              }
              selectors_.add(
                  input.readMessage(Selector.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          selectors_ = java.util.Collections.unmodifiableList(selectors_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return LoggregatorEgress.internal_static_loggregator_v2_EgressRequest_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return LoggregatorEgress.internal_static_loggregator_v2_EgressRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              EgressRequest.class, Builder.class);
    }

    private int bitField0_;
    public static final int SHARD_ID_FIELD_NUMBER = 1;
    private volatile Object shardId_;
    /**
     * <pre>
     * shard_id instructs Loggregator to shard envelopes between other
     * subscriptions with the same shard_id. Loggregator will do its best to
     * split the load evenly between subscriptions with the same shard_id.
     * </pre>
     *
     * <code>string shard_id = 1;</code>
     */
    public String getShardId() {
      Object ref = shardId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        shardId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * shard_id instructs Loggregator to shard envelopes between other
     * subscriptions with the same shard_id. Loggregator will do its best to
     * split the load evenly between subscriptions with the same shard_id.
     * </pre>
     *
     * <code>string shard_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getShardIdBytes() {
      Object ref = shardId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        shardId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LEGACY_SELECTOR_FIELD_NUMBER = 2;
    private Selector legacySelector_;
    /**
     * <pre>
     * TODO: This can be removed once selector has been around long enough.
     * </pre>
     *
     * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
     */
    public boolean hasLegacySelector() {
      return legacySelector_ != null;
    }
    /**
     * <pre>
     * TODO: This can be removed once selector has been around long enough.
     * </pre>
     *
     * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
     */
    public Selector getLegacySelector() {
      return legacySelector_ == null ? Selector.getDefaultInstance() : legacySelector_;
    }
    /**
     * <pre>
     * TODO: This can be removed once selector has been around long enough.
     * </pre>
     *
     * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
     */
    public SelectorOrBuilder getLegacySelectorOrBuilder() {
      return getLegacySelector();
    }

    public static final int SELECTORS_FIELD_NUMBER = 4;
    private java.util.List<Selector> selectors_;
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    public java.util.List<Selector> getSelectorsList() {
      return selectors_;
    }
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    public java.util.List<? extends SelectorOrBuilder>
        getSelectorsOrBuilderList() {
      return selectors_;
    }
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    public int getSelectorsCount() {
      return selectors_.size();
    }
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    public Selector getSelectors(int index) {
      return selectors_.get(index);
    }
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    public SelectorOrBuilder getSelectorsOrBuilder(
        int index) {
      return selectors_.get(index);
    }

    public static final int USE_PREFERRED_TAGS_FIELD_NUMBER = 3;
    private boolean usePreferredTags_;
    /**
     * <pre>
     * TODO: This can be removed once the envelope.deprecated_tags is removed.
     * </pre>
     *
     * <code>bool use_preferred_tags = 3;</code>
     */
    public boolean getUsePreferredTags() {
      return usePreferredTags_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getShardIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, shardId_);
      }
      if (legacySelector_ != null) {
        output.writeMessage(2, getLegacySelector());
      }
      if (usePreferredTags_ != false) {
        output.writeBool(3, usePreferredTags_);
      }
      for (int i = 0; i < selectors_.size(); i++) {
        output.writeMessage(4, selectors_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getShardIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, shardId_);
      }
      if (legacySelector_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getLegacySelector());
      }
      if (usePreferredTags_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, usePreferredTags_);
      }
      for (int i = 0; i < selectors_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, selectors_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof EgressRequest)) {
        return super.equals(obj);
      }
      EgressRequest other = (EgressRequest) obj;

      boolean result = true;
      result = result && getShardId()
          .equals(other.getShardId());
      result = result && (hasLegacySelector() == other.hasLegacySelector());
      if (hasLegacySelector()) {
        result = result && getLegacySelector()
            .equals(other.getLegacySelector());
      }
      result = result && getSelectorsList()
          .equals(other.getSelectorsList());
      result = result && (getUsePreferredTags()
          == other.getUsePreferredTags());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SHARD_ID_FIELD_NUMBER;
      hash = (53 * hash) + getShardId().hashCode();
      if (hasLegacySelector()) {
        hash = (37 * hash) + LEGACY_SELECTOR_FIELD_NUMBER;
        hash = (53 * hash) + getLegacySelector().hashCode();
      }
      if (getSelectorsCount() > 0) {
        hash = (37 * hash) + SELECTORS_FIELD_NUMBER;
        hash = (53 * hash) + getSelectorsList().hashCode();
      }
      hash = (37 * hash) + USE_PREFERRED_TAGS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUsePreferredTags());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static EgressRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static EgressRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static EgressRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static EgressRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static EgressRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static EgressRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static EgressRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static EgressRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static EgressRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static EgressRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static EgressRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static EgressRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(EgressRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code loggregator.v2.EgressRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:loggregator.v2.EgressRequest)
        EgressRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return LoggregatorEgress.internal_static_loggregator_v2_EgressRequest_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return LoggregatorEgress.internal_static_loggregator_v2_EgressRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                EgressRequest.class, Builder.class);
      }

      // Construct using org.cloudfoundry.loggregator.v2.LoggregatorEgress.EgressRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSelectorsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        shardId_ = "";

        if (legacySelectorBuilder_ == null) {
          legacySelector_ = null;
        } else {
          legacySelector_ = null;
          legacySelectorBuilder_ = null;
        }
        if (selectorsBuilder_ == null) {
          selectors_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          selectorsBuilder_.clear();
        }
        usePreferredTags_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return LoggregatorEgress.internal_static_loggregator_v2_EgressRequest_descriptor;
      }

      public EgressRequest getDefaultInstanceForType() {
        return EgressRequest.getDefaultInstance();
      }

      public EgressRequest build() {
        EgressRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public EgressRequest buildPartial() {
        EgressRequest result = new EgressRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.shardId_ = shardId_;
        if (legacySelectorBuilder_ == null) {
          result.legacySelector_ = legacySelector_;
        } else {
          result.legacySelector_ = legacySelectorBuilder_.build();
        }
        if (selectorsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            selectors_ = java.util.Collections.unmodifiableList(selectors_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.selectors_ = selectors_;
        } else {
          result.selectors_ = selectorsBuilder_.build();
        }
        result.usePreferredTags_ = usePreferredTags_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof EgressRequest) {
          return mergeFrom((EgressRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(EgressRequest other) {
        if (other == EgressRequest.getDefaultInstance()) return this;
        if (!other.getShardId().isEmpty()) {
          shardId_ = other.shardId_;
          onChanged();
        }
        if (other.hasLegacySelector()) {
          mergeLegacySelector(other.getLegacySelector());
        }
        if (selectorsBuilder_ == null) {
          if (!other.selectors_.isEmpty()) {
            if (selectors_.isEmpty()) {
              selectors_ = other.selectors_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureSelectorsIsMutable();
              selectors_.addAll(other.selectors_);
            }
            onChanged();
          }
        } else {
          if (!other.selectors_.isEmpty()) {
            if (selectorsBuilder_.isEmpty()) {
              selectorsBuilder_.dispose();
              selectorsBuilder_ = null;
              selectors_ = other.selectors_;
              bitField0_ = (bitField0_ & ~0x00000004);
              selectorsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSelectorsFieldBuilder() : null;
            } else {
              selectorsBuilder_.addAllMessages(other.selectors_);
            }
          }
        }
        if (other.getUsePreferredTags() != false) {
          setUsePreferredTags(other.getUsePreferredTags());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        EgressRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (EgressRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private Object shardId_ = "";
      /**
       * <pre>
       * shard_id instructs Loggregator to shard envelopes between other
       * subscriptions with the same shard_id. Loggregator will do its best to
       * split the load evenly between subscriptions with the same shard_id.
       * </pre>
       *
       * <code>string shard_id = 1;</code>
       */
      public String getShardId() {
        Object ref = shardId_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          shardId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * shard_id instructs Loggregator to shard envelopes between other
       * subscriptions with the same shard_id. Loggregator will do its best to
       * split the load evenly between subscriptions with the same shard_id.
       * </pre>
       *
       * <code>string shard_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getShardIdBytes() {
        Object ref = shardId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          shardId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * shard_id instructs Loggregator to shard envelopes between other
       * subscriptions with the same shard_id. Loggregator will do its best to
       * split the load evenly between subscriptions with the same shard_id.
       * </pre>
       *
       * <code>string shard_id = 1;</code>
       */
      public Builder setShardId(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        shardId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * shard_id instructs Loggregator to shard envelopes between other
       * subscriptions with the same shard_id. Loggregator will do its best to
       * split the load evenly between subscriptions with the same shard_id.
       * </pre>
       *
       * <code>string shard_id = 1;</code>
       */
      public Builder clearShardId() {

        shardId_ = getDefaultInstance().getShardId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * shard_id instructs Loggregator to shard envelopes between other
       * subscriptions with the same shard_id. Loggregator will do its best to
       * split the load evenly between subscriptions with the same shard_id.
       * </pre>
       *
       * <code>string shard_id = 1;</code>
       */
      public Builder setShardIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        shardId_ = value;
        onChanged();
        return this;
      }

      private Selector legacySelector_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          Selector, Selector.Builder, SelectorOrBuilder> legacySelectorBuilder_;
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      public boolean hasLegacySelector() {
        return legacySelectorBuilder_ != null || legacySelector_ != null;
      }
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      public Selector getLegacySelector() {
        if (legacySelectorBuilder_ == null) {
          return legacySelector_ == null ? Selector.getDefaultInstance() : legacySelector_;
        } else {
          return legacySelectorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      public Builder setLegacySelector(Selector value) {
        if (legacySelectorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          legacySelector_ = value;
          onChanged();
        } else {
          legacySelectorBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      public Builder setLegacySelector(
          Selector.Builder builderForValue) {
        if (legacySelectorBuilder_ == null) {
          legacySelector_ = builderForValue.build();
          onChanged();
        } else {
          legacySelectorBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      public Builder mergeLegacySelector(Selector value) {
        if (legacySelectorBuilder_ == null) {
          if (legacySelector_ != null) {
            legacySelector_ =
              Selector.newBuilder(legacySelector_).mergeFrom(value).buildPartial();
          } else {
            legacySelector_ = value;
          }
          onChanged();
        } else {
          legacySelectorBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      public Builder clearLegacySelector() {
        if (legacySelectorBuilder_ == null) {
          legacySelector_ = null;
          onChanged();
        } else {
          legacySelector_ = null;
          legacySelectorBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      public Selector.Builder getLegacySelectorBuilder() {

        onChanged();
        return getLegacySelectorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      public SelectorOrBuilder getLegacySelectorOrBuilder() {
        if (legacySelectorBuilder_ != null) {
          return legacySelectorBuilder_.getMessageOrBuilder();
        } else {
          return legacySelector_ == null ?
              Selector.getDefaultInstance() : legacySelector_;
        }
      }
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Selector, Selector.Builder, SelectorOrBuilder>
          getLegacySelectorFieldBuilder() {
        if (legacySelectorBuilder_ == null) {
          legacySelectorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Selector, Selector.Builder, SelectorOrBuilder>(
                  getLegacySelector(),
                  getParentForChildren(),
                  isClean());
          legacySelector_ = null;
        }
        return legacySelectorBuilder_;
      }

      private java.util.List<Selector> selectors_ =
        java.util.Collections.emptyList();
      private void ensureSelectorsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          selectors_ = new java.util.ArrayList<Selector>(selectors_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          Selector, Selector.Builder, SelectorOrBuilder> selectorsBuilder_;

      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public java.util.List<Selector> getSelectorsList() {
        if (selectorsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(selectors_);
        } else {
          return selectorsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public int getSelectorsCount() {
        if (selectorsBuilder_ == null) {
          return selectors_.size();
        } else {
          return selectorsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Selector getSelectors(int index) {
        if (selectorsBuilder_ == null) {
          return selectors_.get(index);
        } else {
          return selectorsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder setSelectors(
          int index, Selector value) {
        if (selectorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSelectorsIsMutable();
          selectors_.set(index, value);
          onChanged();
        } else {
          selectorsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder setSelectors(
          int index, Selector.Builder builderForValue) {
        if (selectorsBuilder_ == null) {
          ensureSelectorsIsMutable();
          selectors_.set(index, builderForValue.build());
          onChanged();
        } else {
          selectorsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder addSelectors(Selector value) {
        if (selectorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSelectorsIsMutable();
          selectors_.add(value);
          onChanged();
        } else {
          selectorsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder addSelectors(
          int index, Selector value) {
        if (selectorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSelectorsIsMutable();
          selectors_.add(index, value);
          onChanged();
        } else {
          selectorsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder addSelectors(
          Selector.Builder builderForValue) {
        if (selectorsBuilder_ == null) {
          ensureSelectorsIsMutable();
          selectors_.add(builderForValue.build());
          onChanged();
        } else {
          selectorsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder addSelectors(
          int index, Selector.Builder builderForValue) {
        if (selectorsBuilder_ == null) {
          ensureSelectorsIsMutable();
          selectors_.add(index, builderForValue.build());
          onChanged();
        } else {
          selectorsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder addAllSelectors(
          Iterable<? extends Selector> values) {
        if (selectorsBuilder_ == null) {
          ensureSelectorsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, selectors_);
          onChanged();
        } else {
          selectorsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder clearSelectors() {
        if (selectorsBuilder_ == null) {
          selectors_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          selectorsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder removeSelectors(int index) {
        if (selectorsBuilder_ == null) {
          ensureSelectorsIsMutable();
          selectors_.remove(index);
          onChanged();
        } else {
          selectorsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Selector.Builder getSelectorsBuilder(
          int index) {
        return getSelectorsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public SelectorOrBuilder getSelectorsOrBuilder(
          int index) {
        if (selectorsBuilder_ == null) {
          return selectors_.get(index);  } else {
          return selectorsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public java.util.List<? extends SelectorOrBuilder>
           getSelectorsOrBuilderList() {
        if (selectorsBuilder_ != null) {
          return selectorsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(selectors_);
        }
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Selector.Builder addSelectorsBuilder() {
        return getSelectorsFieldBuilder().addBuilder(
            Selector.getDefaultInstance());
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Selector.Builder addSelectorsBuilder(
          int index) {
        return getSelectorsFieldBuilder().addBuilder(
            index, Selector.getDefaultInstance());
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public java.util.List<Selector.Builder>
           getSelectorsBuilderList() {
        return getSelectorsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          Selector, Selector.Builder, SelectorOrBuilder>
          getSelectorsFieldBuilder() {
        if (selectorsBuilder_ == null) {
          selectorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              Selector, Selector.Builder, SelectorOrBuilder>(
                  selectors_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          selectors_ = null;
        }
        return selectorsBuilder_;
      }

      private boolean usePreferredTags_ ;
      /**
       * <pre>
       * TODO: This can be removed once the envelope.deprecated_tags is removed.
       * </pre>
       *
       * <code>bool use_preferred_tags = 3;</code>
       */
      public boolean getUsePreferredTags() {
        return usePreferredTags_;
      }
      /**
       * <pre>
       * TODO: This can be removed once the envelope.deprecated_tags is removed.
       * </pre>
       *
       * <code>bool use_preferred_tags = 3;</code>
       */
      public Builder setUsePreferredTags(boolean value) {

        usePreferredTags_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO: This can be removed once the envelope.deprecated_tags is removed.
       * </pre>
       *
       * <code>bool use_preferred_tags = 3;</code>
       */
      public Builder clearUsePreferredTags() {

        usePreferredTags_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:loggregator.v2.EgressRequest)
    }

    // @@protoc_insertion_point(class_scope:loggregator.v2.EgressRequest)
    private static final EgressRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EgressRequest();
    }

    public static EgressRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EgressRequest>
        PARSER = new com.google.protobuf.AbstractParser<EgressRequest>() {
      public EgressRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EgressRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<EgressRequest> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<EgressRequest> getParserForType() {
      return PARSER;
    }

    public EgressRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EgressBatchRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:loggregator.v2.EgressBatchRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * shard_id instructs Loggregator to shard envelopes between other
     * subscriptions with the same shard_id. Loggregator will do its best to
     * split the load evenly between subscriptions with the same shard_id.
     * </pre>
     *
     * <code>string shard_id = 1;</code>
     */
    String getShardId();
    /**
     * <pre>
     * shard_id instructs Loggregator to shard envelopes between other
     * subscriptions with the same shard_id. Loggregator will do its best to
     * split the load evenly between subscriptions with the same shard_id.
     * </pre>
     *
     * <code>string shard_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getShardIdBytes();

    /**
     * <pre>
     * TODO: This can be removed once selector has been around long enough.
     * </pre>
     *
     * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
     */
    boolean hasLegacySelector();
    /**
     * <pre>
     * TODO: This can be removed once selector has been around long enough.
     * </pre>
     *
     * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
     */
    Selector getLegacySelector();
    /**
     * <pre>
     * TODO: This can be removed once selector has been around long enough.
     * </pre>
     *
     * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
     */
    SelectorOrBuilder getLegacySelectorOrBuilder();

    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    java.util.List<Selector>
        getSelectorsList();
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    Selector getSelectors(int index);
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    int getSelectorsCount();
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    java.util.List<? extends SelectorOrBuilder>
        getSelectorsOrBuilderList();
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    SelectorOrBuilder getSelectorsOrBuilder(
            int index);

    /**
     * <pre>
     * TODO: This can be removed once the envelope.deprecated_tags is removed.
     * </pre>
     *
     * <code>bool use_preferred_tags = 3;</code>
     */
    boolean getUsePreferredTags();
  }
  /**
   * Protobuf type {@code loggregator.v2.EgressBatchRequest}
   */
  public  static final class EgressBatchRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:loggregator.v2.EgressBatchRequest)
      EgressBatchRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EgressBatchRequest.newBuilder() to construct.
    private EgressBatchRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EgressBatchRequest() {
      shardId_ = "";
      selectors_ = java.util.Collections.emptyList();
      usePreferredTags_ = false;
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private EgressBatchRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              String s = input.readStringRequireUtf8();

              shardId_ = s;
              break;
            }
            case 18: {
              Selector.Builder subBuilder = null;
              if (legacySelector_ != null) {
                subBuilder = legacySelector_.toBuilder();
              }
              legacySelector_ = input.readMessage(Selector.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(legacySelector_);
                legacySelector_ = subBuilder.buildPartial();
              }

              break;
            }
            case 24: {

              usePreferredTags_ = input.readBool();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                selectors_ = new java.util.ArrayList<Selector>();
                mutable_bitField0_ |= 0x00000004;
              }
              selectors_.add(
                  input.readMessage(Selector.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          selectors_ = java.util.Collections.unmodifiableList(selectors_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return LoggregatorEgress.internal_static_loggregator_v2_EgressBatchRequest_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return LoggregatorEgress.internal_static_loggregator_v2_EgressBatchRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              EgressBatchRequest.class, Builder.class);
    }

    private int bitField0_;
    public static final int SHARD_ID_FIELD_NUMBER = 1;
    private volatile Object shardId_;
    /**
     * <pre>
     * shard_id instructs Loggregator to shard envelopes between other
     * subscriptions with the same shard_id. Loggregator will do its best to
     * split the load evenly between subscriptions with the same shard_id.
     * </pre>
     *
     * <code>string shard_id = 1;</code>
     */
    public String getShardId() {
      Object ref = shardId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        shardId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * shard_id instructs Loggregator to shard envelopes between other
     * subscriptions with the same shard_id. Loggregator will do its best to
     * split the load evenly between subscriptions with the same shard_id.
     * </pre>
     *
     * <code>string shard_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getShardIdBytes() {
      Object ref = shardId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        shardId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LEGACY_SELECTOR_FIELD_NUMBER = 2;
    private Selector legacySelector_;
    /**
     * <pre>
     * TODO: This can be removed once selector has been around long enough.
     * </pre>
     *
     * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
     */
    public boolean hasLegacySelector() {
      return legacySelector_ != null;
    }
    /**
     * <pre>
     * TODO: This can be removed once selector has been around long enough.
     * </pre>
     *
     * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
     */
    public Selector getLegacySelector() {
      return legacySelector_ == null ? Selector.getDefaultInstance() : legacySelector_;
    }
    /**
     * <pre>
     * TODO: This can be removed once selector has been around long enough.
     * </pre>
     *
     * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
     */
    public SelectorOrBuilder getLegacySelectorOrBuilder() {
      return getLegacySelector();
    }

    public static final int SELECTORS_FIELD_NUMBER = 4;
    private java.util.List<Selector> selectors_;
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    public java.util.List<Selector> getSelectorsList() {
      return selectors_;
    }
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    public java.util.List<? extends SelectorOrBuilder>
        getSelectorsOrBuilderList() {
      return selectors_;
    }
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    public int getSelectorsCount() {
      return selectors_.size();
    }
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    public Selector getSelectors(int index) {
      return selectors_.get(index);
    }
    /**
     * <pre>
     * selector is the preferred (over legacy_selector) mechanism to select
     * what envelope types the subscription wants. If there are no selectors
     * given, no data will be sent.
     * </pre>
     *
     * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
     */
    public SelectorOrBuilder getSelectorsOrBuilder(
        int index) {
      return selectors_.get(index);
    }

    public static final int USE_PREFERRED_TAGS_FIELD_NUMBER = 3;
    private boolean usePreferredTags_;
    /**
     * <pre>
     * TODO: This can be removed once the envelope.deprecated_tags is removed.
     * </pre>
     *
     * <code>bool use_preferred_tags = 3;</code>
     */
    public boolean getUsePreferredTags() {
      return usePreferredTags_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getShardIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, shardId_);
      }
      if (legacySelector_ != null) {
        output.writeMessage(2, getLegacySelector());
      }
      if (usePreferredTags_ != false) {
        output.writeBool(3, usePreferredTags_);
      }
      for (int i = 0; i < selectors_.size(); i++) {
        output.writeMessage(4, selectors_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getShardIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, shardId_);
      }
      if (legacySelector_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getLegacySelector());
      }
      if (usePreferredTags_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, usePreferredTags_);
      }
      for (int i = 0; i < selectors_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, selectors_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof EgressBatchRequest)) {
        return super.equals(obj);
      }
      EgressBatchRequest other = (EgressBatchRequest) obj;

      boolean result = true;
      result = result && getShardId()
          .equals(other.getShardId());
      result = result && (hasLegacySelector() == other.hasLegacySelector());
      if (hasLegacySelector()) {
        result = result && getLegacySelector()
            .equals(other.getLegacySelector());
      }
      result = result && getSelectorsList()
          .equals(other.getSelectorsList());
      result = result && (getUsePreferredTags()
          == other.getUsePreferredTags());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SHARD_ID_FIELD_NUMBER;
      hash = (53 * hash) + getShardId().hashCode();
      if (hasLegacySelector()) {
        hash = (37 * hash) + LEGACY_SELECTOR_FIELD_NUMBER;
        hash = (53 * hash) + getLegacySelector().hashCode();
      }
      if (getSelectorsCount() > 0) {
        hash = (37 * hash) + SELECTORS_FIELD_NUMBER;
        hash = (53 * hash) + getSelectorsList().hashCode();
      }
      hash = (37 * hash) + USE_PREFERRED_TAGS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUsePreferredTags());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static EgressBatchRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static EgressBatchRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static EgressBatchRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static EgressBatchRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static EgressBatchRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static EgressBatchRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static EgressBatchRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static EgressBatchRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static EgressBatchRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static EgressBatchRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static EgressBatchRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static EgressBatchRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(EgressBatchRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code loggregator.v2.EgressBatchRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:loggregator.v2.EgressBatchRequest)
        EgressBatchRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return LoggregatorEgress.internal_static_loggregator_v2_EgressBatchRequest_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return LoggregatorEgress.internal_static_loggregator_v2_EgressBatchRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                EgressBatchRequest.class, Builder.class);
      }

      // Construct using org.cloudfoundry.loggregator.v2.LoggregatorEgress.EgressBatchRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSelectorsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        shardId_ = "";

        if (legacySelectorBuilder_ == null) {
          legacySelector_ = null;
        } else {
          legacySelector_ = null;
          legacySelectorBuilder_ = null;
        }
        if (selectorsBuilder_ == null) {
          selectors_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          selectorsBuilder_.clear();
        }
        usePreferredTags_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return LoggregatorEgress.internal_static_loggregator_v2_EgressBatchRequest_descriptor;
      }

      public EgressBatchRequest getDefaultInstanceForType() {
        return EgressBatchRequest.getDefaultInstance();
      }

      public EgressBatchRequest build() {
        EgressBatchRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public EgressBatchRequest buildPartial() {
        EgressBatchRequest result = new EgressBatchRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.shardId_ = shardId_;
        if (legacySelectorBuilder_ == null) {
          result.legacySelector_ = legacySelector_;
        } else {
          result.legacySelector_ = legacySelectorBuilder_.build();
        }
        if (selectorsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            selectors_ = java.util.Collections.unmodifiableList(selectors_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.selectors_ = selectors_;
        } else {
          result.selectors_ = selectorsBuilder_.build();
        }
        result.usePreferredTags_ = usePreferredTags_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof EgressBatchRequest) {
          return mergeFrom((EgressBatchRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(EgressBatchRequest other) {
        if (other == EgressBatchRequest.getDefaultInstance()) return this;
        if (!other.getShardId().isEmpty()) {
          shardId_ = other.shardId_;
          onChanged();
        }
        if (other.hasLegacySelector()) {
          mergeLegacySelector(other.getLegacySelector());
        }
        if (selectorsBuilder_ == null) {
          if (!other.selectors_.isEmpty()) {
            if (selectors_.isEmpty()) {
              selectors_ = other.selectors_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureSelectorsIsMutable();
              selectors_.addAll(other.selectors_);
            }
            onChanged();
          }
        } else {
          if (!other.selectors_.isEmpty()) {
            if (selectorsBuilder_.isEmpty()) {
              selectorsBuilder_.dispose();
              selectorsBuilder_ = null;
              selectors_ = other.selectors_;
              bitField0_ = (bitField0_ & ~0x00000004);
              selectorsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSelectorsFieldBuilder() : null;
            } else {
              selectorsBuilder_.addAllMessages(other.selectors_);
            }
          }
        }
        if (other.getUsePreferredTags() != false) {
          setUsePreferredTags(other.getUsePreferredTags());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        EgressBatchRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (EgressBatchRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private Object shardId_ = "";
      /**
       * <pre>
       * shard_id instructs Loggregator to shard envelopes between other
       * subscriptions with the same shard_id. Loggregator will do its best to
       * split the load evenly between subscriptions with the same shard_id.
       * </pre>
       *
       * <code>string shard_id = 1;</code>
       */
      public String getShardId() {
        Object ref = shardId_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          shardId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * shard_id instructs Loggregator to shard envelopes between other
       * subscriptions with the same shard_id. Loggregator will do its best to
       * split the load evenly between subscriptions with the same shard_id.
       * </pre>
       *
       * <code>string shard_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getShardIdBytes() {
        Object ref = shardId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          shardId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * shard_id instructs Loggregator to shard envelopes between other
       * subscriptions with the same shard_id. Loggregator will do its best to
       * split the load evenly between subscriptions with the same shard_id.
       * </pre>
       *
       * <code>string shard_id = 1;</code>
       */
      public Builder setShardId(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        shardId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * shard_id instructs Loggregator to shard envelopes between other
       * subscriptions with the same shard_id. Loggregator will do its best to
       * split the load evenly between subscriptions with the same shard_id.
       * </pre>
       *
       * <code>string shard_id = 1;</code>
       */
      public Builder clearShardId() {

        shardId_ = getDefaultInstance().getShardId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * shard_id instructs Loggregator to shard envelopes between other
       * subscriptions with the same shard_id. Loggregator will do its best to
       * split the load evenly between subscriptions with the same shard_id.
       * </pre>
       *
       * <code>string shard_id = 1;</code>
       */
      public Builder setShardIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        shardId_ = value;
        onChanged();
        return this;
      }

      private Selector legacySelector_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          Selector, Selector.Builder, SelectorOrBuilder> legacySelectorBuilder_;
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      public boolean hasLegacySelector() {
        return legacySelectorBuilder_ != null || legacySelector_ != null;
      }
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      public Selector getLegacySelector() {
        if (legacySelectorBuilder_ == null) {
          return legacySelector_ == null ? Selector.getDefaultInstance() : legacySelector_;
        } else {
          return legacySelectorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      public Builder setLegacySelector(Selector value) {
        if (legacySelectorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          legacySelector_ = value;
          onChanged();
        } else {
          legacySelectorBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      public Builder setLegacySelector(
          Selector.Builder builderForValue) {
        if (legacySelectorBuilder_ == null) {
          legacySelector_ = builderForValue.build();
          onChanged();
        } else {
          legacySelectorBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      public Builder mergeLegacySelector(Selector value) {
        if (legacySelectorBuilder_ == null) {
          if (legacySelector_ != null) {
            legacySelector_ =
              Selector.newBuilder(legacySelector_).mergeFrom(value).buildPartial();
          } else {
            legacySelector_ = value;
          }
          onChanged();
        } else {
          legacySelectorBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      public Builder clearLegacySelector() {
        if (legacySelectorBuilder_ == null) {
          legacySelector_ = null;
          onChanged();
        } else {
          legacySelector_ = null;
          legacySelectorBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      public Selector.Builder getLegacySelectorBuilder() {

        onChanged();
        return getLegacySelectorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      public SelectorOrBuilder getLegacySelectorOrBuilder() {
        if (legacySelectorBuilder_ != null) {
          return legacySelectorBuilder_.getMessageOrBuilder();
        } else {
          return legacySelector_ == null ?
              Selector.getDefaultInstance() : legacySelector_;
        }
      }
      /**
       * <pre>
       * TODO: This can be removed once selector has been around long enough.
       * </pre>
       *
       * <code>.loggregator.v2.Selector legacy_selector = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Selector, Selector.Builder, SelectorOrBuilder>
          getLegacySelectorFieldBuilder() {
        if (legacySelectorBuilder_ == null) {
          legacySelectorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Selector, Selector.Builder, SelectorOrBuilder>(
                  getLegacySelector(),
                  getParentForChildren(),
                  isClean());
          legacySelector_ = null;
        }
        return legacySelectorBuilder_;
      }

      private java.util.List<Selector> selectors_ =
        java.util.Collections.emptyList();
      private void ensureSelectorsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          selectors_ = new java.util.ArrayList<Selector>(selectors_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          Selector, Selector.Builder, SelectorOrBuilder> selectorsBuilder_;

      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public java.util.List<Selector> getSelectorsList() {
        if (selectorsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(selectors_);
        } else {
          return selectorsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public int getSelectorsCount() {
        if (selectorsBuilder_ == null) {
          return selectors_.size();
        } else {
          return selectorsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Selector getSelectors(int index) {
        if (selectorsBuilder_ == null) {
          return selectors_.get(index);
        } else {
          return selectorsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder setSelectors(
          int index, Selector value) {
        if (selectorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSelectorsIsMutable();
          selectors_.set(index, value);
          onChanged();
        } else {
          selectorsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder setSelectors(
          int index, Selector.Builder builderForValue) {
        if (selectorsBuilder_ == null) {
          ensureSelectorsIsMutable();
          selectors_.set(index, builderForValue.build());
          onChanged();
        } else {
          selectorsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder addSelectors(Selector value) {
        if (selectorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSelectorsIsMutable();
          selectors_.add(value);
          onChanged();
        } else {
          selectorsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder addSelectors(
          int index, Selector value) {
        if (selectorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSelectorsIsMutable();
          selectors_.add(index, value);
          onChanged();
        } else {
          selectorsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder addSelectors(
          Selector.Builder builderForValue) {
        if (selectorsBuilder_ == null) {
          ensureSelectorsIsMutable();
          selectors_.add(builderForValue.build());
          onChanged();
        } else {
          selectorsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder addSelectors(
          int index, Selector.Builder builderForValue) {
        if (selectorsBuilder_ == null) {
          ensureSelectorsIsMutable();
          selectors_.add(index, builderForValue.build());
          onChanged();
        } else {
          selectorsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder addAllSelectors(
          Iterable<? extends Selector> values) {
        if (selectorsBuilder_ == null) {
          ensureSelectorsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, selectors_);
          onChanged();
        } else {
          selectorsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder clearSelectors() {
        if (selectorsBuilder_ == null) {
          selectors_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          selectorsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Builder removeSelectors(int index) {
        if (selectorsBuilder_ == null) {
          ensureSelectorsIsMutable();
          selectors_.remove(index);
          onChanged();
        } else {
          selectorsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Selector.Builder getSelectorsBuilder(
          int index) {
        return getSelectorsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public SelectorOrBuilder getSelectorsOrBuilder(
          int index) {
        if (selectorsBuilder_ == null) {
          return selectors_.get(index);  } else {
          return selectorsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public java.util.List<? extends SelectorOrBuilder>
           getSelectorsOrBuilderList() {
        if (selectorsBuilder_ != null) {
          return selectorsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(selectors_);
        }
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Selector.Builder addSelectorsBuilder() {
        return getSelectorsFieldBuilder().addBuilder(
            Selector.getDefaultInstance());
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public Selector.Builder addSelectorsBuilder(
          int index) {
        return getSelectorsFieldBuilder().addBuilder(
            index, Selector.getDefaultInstance());
      }
      /**
       * <pre>
       * selector is the preferred (over legacy_selector) mechanism to select
       * what envelope types the subscription wants. If there are no selectors
       * given, no data will be sent.
       * </pre>
       *
       * <code>repeated .loggregator.v2.Selector selectors = 4;</code>
       */
      public java.util.List<Selector.Builder>
           getSelectorsBuilderList() {
        return getSelectorsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          Selector, Selector.Builder, SelectorOrBuilder>
          getSelectorsFieldBuilder() {
        if (selectorsBuilder_ == null) {
          selectorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              Selector, Selector.Builder, SelectorOrBuilder>(
                  selectors_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          selectors_ = null;
        }
        return selectorsBuilder_;
      }

      private boolean usePreferredTags_ ;
      /**
       * <pre>
       * TODO: This can be removed once the envelope.deprecated_tags is removed.
       * </pre>
       *
       * <code>bool use_preferred_tags = 3;</code>
       */
      public boolean getUsePreferredTags() {
        return usePreferredTags_;
      }
      /**
       * <pre>
       * TODO: This can be removed once the envelope.deprecated_tags is removed.
       * </pre>
       *
       * <code>bool use_preferred_tags = 3;</code>
       */
      public Builder setUsePreferredTags(boolean value) {

        usePreferredTags_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO: This can be removed once the envelope.deprecated_tags is removed.
       * </pre>
       *
       * <code>bool use_preferred_tags = 3;</code>
       */
      public Builder clearUsePreferredTags() {

        usePreferredTags_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:loggregator.v2.EgressBatchRequest)
    }

    // @@protoc_insertion_point(class_scope:loggregator.v2.EgressBatchRequest)
    private static final EgressBatchRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EgressBatchRequest();
    }

    public static EgressBatchRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EgressBatchRequest>
        PARSER = new com.google.protobuf.AbstractParser<EgressBatchRequest>() {
      public EgressBatchRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EgressBatchRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<EgressBatchRequest> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<EgressBatchRequest> getParserForType() {
      return PARSER;
    }

    public EgressBatchRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SelectorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:loggregator.v2.Selector)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string source_id = 1;</code>
     */
    String getSourceId();
    /**
     * <code>string source_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getSourceIdBytes();

    /**
     * <code>.loggregator.v2.LogSelector log = 2;</code>
     */
    boolean hasLog();
    /**
     * <code>.loggregator.v2.LogSelector log = 2;</code>
     */
    LogSelector getLog();
    /**
     * <code>.loggregator.v2.LogSelector log = 2;</code>
     */
    LogSelectorOrBuilder getLogOrBuilder();

    /**
     * <code>.loggregator.v2.CounterSelector counter = 3;</code>
     */
    boolean hasCounter();
    /**
     * <code>.loggregator.v2.CounterSelector counter = 3;</code>
     */
    CounterSelector getCounter();
    /**
     * <code>.loggregator.v2.CounterSelector counter = 3;</code>
     */
    CounterSelectorOrBuilder getCounterOrBuilder();

    /**
     * <code>.loggregator.v2.GaugeSelector gauge = 4;</code>
     */
    boolean hasGauge();
    /**
     * <code>.loggregator.v2.GaugeSelector gauge = 4;</code>
     */
    GaugeSelector getGauge();
    /**
     * <code>.loggregator.v2.GaugeSelector gauge = 4;</code>
     */
    GaugeSelectorOrBuilder getGaugeOrBuilder();

    /**
     * <code>.loggregator.v2.TimerSelector timer = 5;</code>
     */
    boolean hasTimer();
    /**
     * <code>.loggregator.v2.TimerSelector timer = 5;</code>
     */
    TimerSelector getTimer();
    /**
     * <code>.loggregator.v2.TimerSelector timer = 5;</code>
     */
    TimerSelectorOrBuilder getTimerOrBuilder();

    /**
     * <code>.loggregator.v2.EventSelector event = 6;</code>
     */
    boolean hasEvent();
    /**
     * <code>.loggregator.v2.EventSelector event = 6;</code>
     */
    EventSelector getEvent();
    /**
     * <code>.loggregator.v2.EventSelector event = 6;</code>
     */
    EventSelectorOrBuilder getEventOrBuilder();

    public Selector.MessageCase getMessageCase();
  }
  /**
   * <pre>
   * Selector instructs Loggregator to only send envelopes that match the given
   * criteria.
   * </pre>
   *
   * Protobuf type {@code loggregator.v2.Selector}
   */
  public  static final class Selector extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:loggregator.v2.Selector)
      SelectorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Selector.newBuilder() to construct.
    private Selector(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Selector() {
      sourceId_ = "";
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Selector(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              String s = input.readStringRequireUtf8();

              sourceId_ = s;
              break;
            }
            case 18: {
              LogSelector.Builder subBuilder = null;
              if (messageCase_ == 2) {
                subBuilder = ((LogSelector) message_).toBuilder();
              }
              message_ =
                  input.readMessage(LogSelector.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((LogSelector) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 2;
              break;
            }
            case 26: {
              CounterSelector.Builder subBuilder = null;
              if (messageCase_ == 3) {
                subBuilder = ((CounterSelector) message_).toBuilder();
              }
              message_ =
                  input.readMessage(CounterSelector.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((CounterSelector) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 3;
              break;
            }
            case 34: {
              GaugeSelector.Builder subBuilder = null;
              if (messageCase_ == 4) {
                subBuilder = ((GaugeSelector) message_).toBuilder();
              }
              message_ =
                  input.readMessage(GaugeSelector.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((GaugeSelector) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 4;
              break;
            }
            case 42: {
              TimerSelector.Builder subBuilder = null;
              if (messageCase_ == 5) {
                subBuilder = ((TimerSelector) message_).toBuilder();
              }
              message_ =
                  input.readMessage(TimerSelector.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((TimerSelector) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 5;
              break;
            }
            case 50: {
              EventSelector.Builder subBuilder = null;
              if (messageCase_ == 6) {
                subBuilder = ((EventSelector) message_).toBuilder();
              }
              message_ =
                  input.readMessage(EventSelector.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((EventSelector) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 6;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return LoggregatorEgress.internal_static_loggregator_v2_Selector_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return LoggregatorEgress.internal_static_loggregator_v2_Selector_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Selector.class, Builder.class);
    }

    private int messageCase_ = 0;
    private Object message_;
    public enum MessageCase
        implements com.google.protobuf.Internal.EnumLite {
      LOG(2),
      COUNTER(3),
      GAUGE(4),
      TIMER(5),
      EVENT(6),
      MESSAGE_NOT_SET(0);
      private final int value;
      private MessageCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @Deprecated
      public static MessageCase valueOf(int value) {
        return forNumber(value);
      }

      public static MessageCase forNumber(int value) {
        switch (value) {
          case 2: return LOG;
          case 3: return COUNTER;
          case 4: return GAUGE;
          case 5: return TIMER;
          case 6: return EVENT;
          case 0: return MESSAGE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MessageCase
    getMessageCase() {
      return MessageCase.forNumber(
          messageCase_);
    }

    public static final int SOURCE_ID_FIELD_NUMBER = 1;
    private volatile Object sourceId_;
    /**
     * <code>string source_id = 1;</code>
     */
    public String getSourceId() {
      Object ref = sourceId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        sourceId_ = s;
        return s;
      }
    }
    /**
     * <code>string source_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSourceIdBytes() {
      Object ref = sourceId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        sourceId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LOG_FIELD_NUMBER = 2;
    /**
     * <code>.loggregator.v2.LogSelector log = 2;</code>
     */
    public boolean hasLog() {
      return messageCase_ == 2;
    }
    /**
     * <code>.loggregator.v2.LogSelector log = 2;</code>
     */
    public LogSelector getLog() {
      if (messageCase_ == 2) {
         return (LogSelector) message_;
      }
      return LogSelector.getDefaultInstance();
    }
    /**
     * <code>.loggregator.v2.LogSelector log = 2;</code>
     */
    public LogSelectorOrBuilder getLogOrBuilder() {
      if (messageCase_ == 2) {
         return (LogSelector) message_;
      }
      return LogSelector.getDefaultInstance();
    }

    public static final int COUNTER_FIELD_NUMBER = 3;
    /**
     * <code>.loggregator.v2.CounterSelector counter = 3;</code>
     */
    public boolean hasCounter() {
      return messageCase_ == 3;
    }
    /**
     * <code>.loggregator.v2.CounterSelector counter = 3;</code>
     */
    public CounterSelector getCounter() {
      if (messageCase_ == 3) {
         return (CounterSelector) message_;
      }
      return CounterSelector.getDefaultInstance();
    }
    /**
     * <code>.loggregator.v2.CounterSelector counter = 3;</code>
     */
    public CounterSelectorOrBuilder getCounterOrBuilder() {
      if (messageCase_ == 3) {
         return (CounterSelector) message_;
      }
      return CounterSelector.getDefaultInstance();
    }

    public static final int GAUGE_FIELD_NUMBER = 4;
    /**
     * <code>.loggregator.v2.GaugeSelector gauge = 4;</code>
     */
    public boolean hasGauge() {
      return messageCase_ == 4;
    }
    /**
     * <code>.loggregator.v2.GaugeSelector gauge = 4;</code>
     */
    public GaugeSelector getGauge() {
      if (messageCase_ == 4) {
         return (GaugeSelector) message_;
      }
      return GaugeSelector.getDefaultInstance();
    }
    /**
     * <code>.loggregator.v2.GaugeSelector gauge = 4;</code>
     */
    public GaugeSelectorOrBuilder getGaugeOrBuilder() {
      if (messageCase_ == 4) {
         return (GaugeSelector) message_;
      }
      return GaugeSelector.getDefaultInstance();
    }

    public static final int TIMER_FIELD_NUMBER = 5;
    /**
     * <code>.loggregator.v2.TimerSelector timer = 5;</code>
     */
    public boolean hasTimer() {
      return messageCase_ == 5;
    }
    /**
     * <code>.loggregator.v2.TimerSelector timer = 5;</code>
     */
    public TimerSelector getTimer() {
      if (messageCase_ == 5) {
         return (TimerSelector) message_;
      }
      return TimerSelector.getDefaultInstance();
    }
    /**
     * <code>.loggregator.v2.TimerSelector timer = 5;</code>
     */
    public TimerSelectorOrBuilder getTimerOrBuilder() {
      if (messageCase_ == 5) {
         return (TimerSelector) message_;
      }
      return TimerSelector.getDefaultInstance();
    }

    public static final int EVENT_FIELD_NUMBER = 6;
    /**
     * <code>.loggregator.v2.EventSelector event = 6;</code>
     */
    public boolean hasEvent() {
      return messageCase_ == 6;
    }
    /**
     * <code>.loggregator.v2.EventSelector event = 6;</code>
     */
    public EventSelector getEvent() {
      if (messageCase_ == 6) {
         return (EventSelector) message_;
      }
      return EventSelector.getDefaultInstance();
    }
    /**
     * <code>.loggregator.v2.EventSelector event = 6;</code>
     */
    public EventSelectorOrBuilder getEventOrBuilder() {
      if (messageCase_ == 6) {
         return (EventSelector) message_;
      }
      return EventSelector.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getSourceIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, sourceId_);
      }
      if (messageCase_ == 2) {
        output.writeMessage(2, (LogSelector) message_);
      }
      if (messageCase_ == 3) {
        output.writeMessage(3, (CounterSelector) message_);
      }
      if (messageCase_ == 4) {
        output.writeMessage(4, (GaugeSelector) message_);
      }
      if (messageCase_ == 5) {
        output.writeMessage(5, (TimerSelector) message_);
      }
      if (messageCase_ == 6) {
        output.writeMessage(6, (EventSelector) message_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getSourceIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, sourceId_);
      }
      if (messageCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (LogSelector) message_);
      }
      if (messageCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (CounterSelector) message_);
      }
      if (messageCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (GaugeSelector) message_);
      }
      if (messageCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (TimerSelector) message_);
      }
      if (messageCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (EventSelector) message_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Selector)) {
        return super.equals(obj);
      }
      Selector other = (Selector) obj;

      boolean result = true;
      result = result && getSourceId()
          .equals(other.getSourceId());
      result = result && getMessageCase().equals(
          other.getMessageCase());
      if (!result) return false;
      switch (messageCase_) {
        case 2:
          result = result && getLog()
              .equals(other.getLog());
          break;
        case 3:
          result = result && getCounter()
              .equals(other.getCounter());
          break;
        case 4:
          result = result && getGauge()
              .equals(other.getGauge());
          break;
        case 5:
          result = result && getTimer()
              .equals(other.getTimer());
          break;
        case 6:
          result = result && getEvent()
              .equals(other.getEvent());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SOURCE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getSourceId().hashCode();
      switch (messageCase_) {
        case 2:
          hash = (37 * hash) + LOG_FIELD_NUMBER;
          hash = (53 * hash) + getLog().hashCode();
          break;
        case 3:
          hash = (37 * hash) + COUNTER_FIELD_NUMBER;
          hash = (53 * hash) + getCounter().hashCode();
          break;
        case 4:
          hash = (37 * hash) + GAUGE_FIELD_NUMBER;
          hash = (53 * hash) + getGauge().hashCode();
          break;
        case 5:
          hash = (37 * hash) + TIMER_FIELD_NUMBER;
          hash = (53 * hash) + getTimer().hashCode();
          break;
        case 6:
          hash = (37 * hash) + EVENT_FIELD_NUMBER;
          hash = (53 * hash) + getEvent().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Selector parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Selector parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Selector parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Selector parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Selector parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Selector parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Selector parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Selector parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Selector parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Selector parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Selector parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Selector parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Selector prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Selector instructs Loggregator to only send envelopes that match the given
     * criteria.
     * </pre>
     *
     * Protobuf type {@code loggregator.v2.Selector}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:loggregator.v2.Selector)
        SelectorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return LoggregatorEgress.internal_static_loggregator_v2_Selector_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return LoggregatorEgress.internal_static_loggregator_v2_Selector_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Selector.class, Builder.class);
      }

      // Construct using org.cloudfoundry.loggregator.v2.LoggregatorEgress.Selector.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        sourceId_ = "";

        messageCase_ = 0;
        message_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return LoggregatorEgress.internal_static_loggregator_v2_Selector_descriptor;
      }

      public Selector getDefaultInstanceForType() {
        return Selector.getDefaultInstance();
      }

      public Selector build() {
        Selector result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Selector buildPartial() {
        Selector result = new Selector(this);
        result.sourceId_ = sourceId_;
        if (messageCase_ == 2) {
          if (logBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = logBuilder_.build();
          }
        }
        if (messageCase_ == 3) {
          if (counterBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = counterBuilder_.build();
          }
        }
        if (messageCase_ == 4) {
          if (gaugeBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = gaugeBuilder_.build();
          }
        }
        if (messageCase_ == 5) {
          if (timerBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = timerBuilder_.build();
          }
        }
        if (messageCase_ == 6) {
          if (eventBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = eventBuilder_.build();
          }
        }
        result.messageCase_ = messageCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Selector) {
          return mergeFrom((Selector)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Selector other) {
        if (other == Selector.getDefaultInstance()) return this;
        if (!other.getSourceId().isEmpty()) {
          sourceId_ = other.sourceId_;
          onChanged();
        }
        switch (other.getMessageCase()) {
          case LOG: {
            mergeLog(other.getLog());
            break;
          }
          case COUNTER: {
            mergeCounter(other.getCounter());
            break;
          }
          case GAUGE: {
            mergeGauge(other.getGauge());
            break;
          }
          case TIMER: {
            mergeTimer(other.getTimer());
            break;
          }
          case EVENT: {
            mergeEvent(other.getEvent());
            break;
          }
          case MESSAGE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Selector parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Selector) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int messageCase_ = 0;
      private Object message_;
      public MessageCase
          getMessageCase() {
        return MessageCase.forNumber(
            messageCase_);
      }

      public Builder clearMessage() {
        messageCase_ = 0;
        message_ = null;
        onChanged();
        return this;
      }


      private Object sourceId_ = "";
      /**
       * <code>string source_id = 1;</code>
       */
      public String getSourceId() {
        Object ref = sourceId_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          sourceId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>string source_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getSourceIdBytes() {
        Object ref = sourceId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          sourceId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string source_id = 1;</code>
       */
      public Builder setSourceId(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        sourceId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string source_id = 1;</code>
       */
      public Builder clearSourceId() {

        sourceId_ = getDefaultInstance().getSourceId();
        onChanged();
        return this;
      }
      /**
       * <code>string source_id = 1;</code>
       */
      public Builder setSourceIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        sourceId_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          LogSelector, LogSelector.Builder, LogSelectorOrBuilder> logBuilder_;
      /**
       * <code>.loggregator.v2.LogSelector log = 2;</code>
       */
      public boolean hasLog() {
        return messageCase_ == 2;
      }
      /**
       * <code>.loggregator.v2.LogSelector log = 2;</code>
       */
      public LogSelector getLog() {
        if (logBuilder_ == null) {
          if (messageCase_ == 2) {
            return (LogSelector) message_;
          }
          return LogSelector.getDefaultInstance();
        } else {
          if (messageCase_ == 2) {
            return logBuilder_.getMessage();
          }
          return LogSelector.getDefaultInstance();
        }
      }
      /**
       * <code>.loggregator.v2.LogSelector log = 2;</code>
       */
      public Builder setLog(LogSelector value) {
        if (logBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          logBuilder_.setMessage(value);
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <code>.loggregator.v2.LogSelector log = 2;</code>
       */
      public Builder setLog(
          LogSelector.Builder builderForValue) {
        if (logBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          logBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <code>.loggregator.v2.LogSelector log = 2;</code>
       */
      public Builder mergeLog(LogSelector value) {
        if (logBuilder_ == null) {
          if (messageCase_ == 2 &&
              message_ != LogSelector.getDefaultInstance()) {
            message_ = LogSelector.newBuilder((LogSelector) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 2) {
            logBuilder_.mergeFrom(value);
          }
          logBuilder_.setMessage(value);
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <code>.loggregator.v2.LogSelector log = 2;</code>
       */
      public Builder clearLog() {
        if (logBuilder_ == null) {
          if (messageCase_ == 2) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 2) {
            messageCase_ = 0;
            message_ = null;
          }
          logBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.loggregator.v2.LogSelector log = 2;</code>
       */
      public LogSelector.Builder getLogBuilder() {
        return getLogFieldBuilder().getBuilder();
      }
      /**
       * <code>.loggregator.v2.LogSelector log = 2;</code>
       */
      public LogSelectorOrBuilder getLogOrBuilder() {
        if ((messageCase_ == 2) && (logBuilder_ != null)) {
          return logBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 2) {
            return (LogSelector) message_;
          }
          return LogSelector.getDefaultInstance();
        }
      }
      /**
       * <code>.loggregator.v2.LogSelector log = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          LogSelector, LogSelector.Builder, LogSelectorOrBuilder>
          getLogFieldBuilder() {
        if (logBuilder_ == null) {
          if (!(messageCase_ == 2)) {
            message_ = LogSelector.getDefaultInstance();
          }
          logBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              LogSelector, LogSelector.Builder, LogSelectorOrBuilder>(
                  (LogSelector) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 2;
        onChanged();;
        return logBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          CounterSelector, CounterSelector.Builder, CounterSelectorOrBuilder> counterBuilder_;
      /**
       * <code>.loggregator.v2.CounterSelector counter = 3;</code>
       */
      public boolean hasCounter() {
        return messageCase_ == 3;
      }
      /**
       * <code>.loggregator.v2.CounterSelector counter = 3;</code>
       */
      public CounterSelector getCounter() {
        if (counterBuilder_ == null) {
          if (messageCase_ == 3) {
            return (CounterSelector) message_;
          }
          return CounterSelector.getDefaultInstance();
        } else {
          if (messageCase_ == 3) {
            return counterBuilder_.getMessage();
          }
          return CounterSelector.getDefaultInstance();
        }
      }
      /**
       * <code>.loggregator.v2.CounterSelector counter = 3;</code>
       */
      public Builder setCounter(CounterSelector value) {
        if (counterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          counterBuilder_.setMessage(value);
        }
        messageCase_ = 3;
        return this;
      }
      /**
       * <code>.loggregator.v2.CounterSelector counter = 3;</code>
       */
      public Builder setCounter(
          CounterSelector.Builder builderForValue) {
        if (counterBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          counterBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 3;
        return this;
      }
      /**
       * <code>.loggregator.v2.CounterSelector counter = 3;</code>
       */
      public Builder mergeCounter(CounterSelector value) {
        if (counterBuilder_ == null) {
          if (messageCase_ == 3 &&
              message_ != CounterSelector.getDefaultInstance()) {
            message_ = CounterSelector.newBuilder((CounterSelector) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 3) {
            counterBuilder_.mergeFrom(value);
          }
          counterBuilder_.setMessage(value);
        }
        messageCase_ = 3;
        return this;
      }
      /**
       * <code>.loggregator.v2.CounterSelector counter = 3;</code>
       */
      public Builder clearCounter() {
        if (counterBuilder_ == null) {
          if (messageCase_ == 3) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 3) {
            messageCase_ = 0;
            message_ = null;
          }
          counterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.loggregator.v2.CounterSelector counter = 3;</code>
       */
      public CounterSelector.Builder getCounterBuilder() {
        return getCounterFieldBuilder().getBuilder();
      }
      /**
       * <code>.loggregator.v2.CounterSelector counter = 3;</code>
       */
      public CounterSelectorOrBuilder getCounterOrBuilder() {
        if ((messageCase_ == 3) && (counterBuilder_ != null)) {
          return counterBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 3) {
            return (CounterSelector) message_;
          }
          return CounterSelector.getDefaultInstance();
        }
      }
      /**
       * <code>.loggregator.v2.CounterSelector counter = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          CounterSelector, CounterSelector.Builder, CounterSelectorOrBuilder>
          getCounterFieldBuilder() {
        if (counterBuilder_ == null) {
          if (!(messageCase_ == 3)) {
            message_ = CounterSelector.getDefaultInstance();
          }
          counterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              CounterSelector, CounterSelector.Builder, CounterSelectorOrBuilder>(
                  (CounterSelector) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 3;
        onChanged();;
        return counterBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          GaugeSelector, GaugeSelector.Builder, GaugeSelectorOrBuilder> gaugeBuilder_;
      /**
       * <code>.loggregator.v2.GaugeSelector gauge = 4;</code>
       */
      public boolean hasGauge() {
        return messageCase_ == 4;
      }
      /**
       * <code>.loggregator.v2.GaugeSelector gauge = 4;</code>
       */
      public GaugeSelector getGauge() {
        if (gaugeBuilder_ == null) {
          if (messageCase_ == 4) {
            return (GaugeSelector) message_;
          }
          return GaugeSelector.getDefaultInstance();
        } else {
          if (messageCase_ == 4) {
            return gaugeBuilder_.getMessage();
          }
          return GaugeSelector.getDefaultInstance();
        }
      }
      /**
       * <code>.loggregator.v2.GaugeSelector gauge = 4;</code>
       */
      public Builder setGauge(GaugeSelector value) {
        if (gaugeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          gaugeBuilder_.setMessage(value);
        }
        messageCase_ = 4;
        return this;
      }
      /**
       * <code>.loggregator.v2.GaugeSelector gauge = 4;</code>
       */
      public Builder setGauge(
          GaugeSelector.Builder builderForValue) {
        if (gaugeBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          gaugeBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 4;
        return this;
      }
      /**
       * <code>.loggregator.v2.GaugeSelector gauge = 4;</code>
       */
      public Builder mergeGauge(GaugeSelector value) {
        if (gaugeBuilder_ == null) {
          if (messageCase_ == 4 &&
              message_ != GaugeSelector.getDefaultInstance()) {
            message_ = GaugeSelector.newBuilder((GaugeSelector) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 4) {
            gaugeBuilder_.mergeFrom(value);
          }
          gaugeBuilder_.setMessage(value);
        }
        messageCase_ = 4;
        return this;
      }
      /**
       * <code>.loggregator.v2.GaugeSelector gauge = 4;</code>
       */
      public Builder clearGauge() {
        if (gaugeBuilder_ == null) {
          if (messageCase_ == 4) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 4) {
            messageCase_ = 0;
            message_ = null;
          }
          gaugeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.loggregator.v2.GaugeSelector gauge = 4;</code>
       */
      public GaugeSelector.Builder getGaugeBuilder() {
        return getGaugeFieldBuilder().getBuilder();
      }
      /**
       * <code>.loggregator.v2.GaugeSelector gauge = 4;</code>
       */
      public GaugeSelectorOrBuilder getGaugeOrBuilder() {
        if ((messageCase_ == 4) && (gaugeBuilder_ != null)) {
          return gaugeBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 4) {
            return (GaugeSelector) message_;
          }
          return GaugeSelector.getDefaultInstance();
        }
      }
      /**
       * <code>.loggregator.v2.GaugeSelector gauge = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          GaugeSelector, GaugeSelector.Builder, GaugeSelectorOrBuilder>
          getGaugeFieldBuilder() {
        if (gaugeBuilder_ == null) {
          if (!(messageCase_ == 4)) {
            message_ = GaugeSelector.getDefaultInstance();
          }
          gaugeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              GaugeSelector, GaugeSelector.Builder, GaugeSelectorOrBuilder>(
                  (GaugeSelector) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 4;
        onChanged();;
        return gaugeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          TimerSelector, TimerSelector.Builder, TimerSelectorOrBuilder> timerBuilder_;
      /**
       * <code>.loggregator.v2.TimerSelector timer = 5;</code>
       */
      public boolean hasTimer() {
        return messageCase_ == 5;
      }
      /**
       * <code>.loggregator.v2.TimerSelector timer = 5;</code>
       */
      public TimerSelector getTimer() {
        if (timerBuilder_ == null) {
          if (messageCase_ == 5) {
            return (TimerSelector) message_;
          }
          return TimerSelector.getDefaultInstance();
        } else {
          if (messageCase_ == 5) {
            return timerBuilder_.getMessage();
          }
          return TimerSelector.getDefaultInstance();
        }
      }
      /**
       * <code>.loggregator.v2.TimerSelector timer = 5;</code>
       */
      public Builder setTimer(TimerSelector value) {
        if (timerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          timerBuilder_.setMessage(value);
        }
        messageCase_ = 5;
        return this;
      }
      /**
       * <code>.loggregator.v2.TimerSelector timer = 5;</code>
       */
      public Builder setTimer(
          TimerSelector.Builder builderForValue) {
        if (timerBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          timerBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 5;
        return this;
      }
      /**
       * <code>.loggregator.v2.TimerSelector timer = 5;</code>
       */
      public Builder mergeTimer(TimerSelector value) {
        if (timerBuilder_ == null) {
          if (messageCase_ == 5 &&
              message_ != TimerSelector.getDefaultInstance()) {
            message_ = TimerSelector.newBuilder((TimerSelector) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 5) {
            timerBuilder_.mergeFrom(value);
          }
          timerBuilder_.setMessage(value);
        }
        messageCase_ = 5;
        return this;
      }
      /**
       * <code>.loggregator.v2.TimerSelector timer = 5;</code>
       */
      public Builder clearTimer() {
        if (timerBuilder_ == null) {
          if (messageCase_ == 5) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 5) {
            messageCase_ = 0;
            message_ = null;
          }
          timerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.loggregator.v2.TimerSelector timer = 5;</code>
       */
      public TimerSelector.Builder getTimerBuilder() {
        return getTimerFieldBuilder().getBuilder();
      }
      /**
       * <code>.loggregator.v2.TimerSelector timer = 5;</code>
       */
      public TimerSelectorOrBuilder getTimerOrBuilder() {
        if ((messageCase_ == 5) && (timerBuilder_ != null)) {
          return timerBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 5) {
            return (TimerSelector) message_;
          }
          return TimerSelector.getDefaultInstance();
        }
      }
      /**
       * <code>.loggregator.v2.TimerSelector timer = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          TimerSelector, TimerSelector.Builder, TimerSelectorOrBuilder>
          getTimerFieldBuilder() {
        if (timerBuilder_ == null) {
          if (!(messageCase_ == 5)) {
            message_ = TimerSelector.getDefaultInstance();
          }
          timerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              TimerSelector, TimerSelector.Builder, TimerSelectorOrBuilder>(
                  (TimerSelector) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 5;
        onChanged();;
        return timerBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          EventSelector, EventSelector.Builder, EventSelectorOrBuilder> eventBuilder_;
      /**
       * <code>.loggregator.v2.EventSelector event = 6;</code>
       */
      public boolean hasEvent() {
        return messageCase_ == 6;
      }
      /**
       * <code>.loggregator.v2.EventSelector event = 6;</code>
       */
      public EventSelector getEvent() {
        if (eventBuilder_ == null) {
          if (messageCase_ == 6) {
            return (EventSelector) message_;
          }
          return EventSelector.getDefaultInstance();
        } else {
          if (messageCase_ == 6) {
            return eventBuilder_.getMessage();
          }
          return EventSelector.getDefaultInstance();
        }
      }
      /**
       * <code>.loggregator.v2.EventSelector event = 6;</code>
       */
      public Builder setEvent(EventSelector value) {
        if (eventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          eventBuilder_.setMessage(value);
        }
        messageCase_ = 6;
        return this;
      }
      /**
       * <code>.loggregator.v2.EventSelector event = 6;</code>
       */
      public Builder setEvent(
          EventSelector.Builder builderForValue) {
        if (eventBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          eventBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 6;
        return this;
      }
      /**
       * <code>.loggregator.v2.EventSelector event = 6;</code>
       */
      public Builder mergeEvent(EventSelector value) {
        if (eventBuilder_ == null) {
          if (messageCase_ == 6 &&
              message_ != EventSelector.getDefaultInstance()) {
            message_ = EventSelector.newBuilder((EventSelector) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 6) {
            eventBuilder_.mergeFrom(value);
          }
          eventBuilder_.setMessage(value);
        }
        messageCase_ = 6;
        return this;
      }
      /**
       * <code>.loggregator.v2.EventSelector event = 6;</code>
       */
      public Builder clearEvent() {
        if (eventBuilder_ == null) {
          if (messageCase_ == 6) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 6) {
            messageCase_ = 0;
            message_ = null;
          }
          eventBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.loggregator.v2.EventSelector event = 6;</code>
       */
      public EventSelector.Builder getEventBuilder() {
        return getEventFieldBuilder().getBuilder();
      }
      /**
       * <code>.loggregator.v2.EventSelector event = 6;</code>
       */
      public EventSelectorOrBuilder getEventOrBuilder() {
        if ((messageCase_ == 6) && (eventBuilder_ != null)) {
          return eventBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 6) {
            return (EventSelector) message_;
          }
          return EventSelector.getDefaultInstance();
        }
      }
      /**
       * <code>.loggregator.v2.EventSelector event = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          EventSelector, EventSelector.Builder, EventSelectorOrBuilder>
          getEventFieldBuilder() {
        if (eventBuilder_ == null) {
          if (!(messageCase_ == 6)) {
            message_ = EventSelector.getDefaultInstance();
          }
          eventBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              EventSelector, EventSelector.Builder, EventSelectorOrBuilder>(
                  (EventSelector) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 6;
        onChanged();;
        return eventBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:loggregator.v2.Selector)
    }

    // @@protoc_insertion_point(class_scope:loggregator.v2.Selector)
    private static final Selector DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Selector();
    }

    public static Selector getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Selector>
        PARSER = new com.google.protobuf.AbstractParser<Selector>() {
      public Selector parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Selector(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Selector> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Selector> getParserForType() {
      return PARSER;
    }

    public Selector getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LogSelectorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:loggregator.v2.LogSelector)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * LogSelector instructs Loggregator to egress Log envelopes to the given
   * subscription.
   * </pre>
   *
   * Protobuf type {@code loggregator.v2.LogSelector}
   */
  public  static final class LogSelector extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:loggregator.v2.LogSelector)
      LogSelectorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LogSelector.newBuilder() to construct.
    private LogSelector(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LogSelector() {
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LogSelector(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return LoggregatorEgress.internal_static_loggregator_v2_LogSelector_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return LoggregatorEgress.internal_static_loggregator_v2_LogSelector_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              LogSelector.class, Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof LogSelector)) {
        return super.equals(obj);
      }
      LogSelector other = (LogSelector) obj;

      boolean result = true;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static LogSelector parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static LogSelector parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static LogSelector parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static LogSelector parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static LogSelector parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static LogSelector parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static LogSelector parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static LogSelector parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static LogSelector parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static LogSelector parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static LogSelector parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static LogSelector parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(LogSelector prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * LogSelector instructs Loggregator to egress Log envelopes to the given
     * subscription.
     * </pre>
     *
     * Protobuf type {@code loggregator.v2.LogSelector}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:loggregator.v2.LogSelector)
        LogSelectorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return LoggregatorEgress.internal_static_loggregator_v2_LogSelector_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return LoggregatorEgress.internal_static_loggregator_v2_LogSelector_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                LogSelector.class, Builder.class);
      }

      // Construct using org.cloudfoundry.loggregator.v2.LoggregatorEgress.LogSelector.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return LoggregatorEgress.internal_static_loggregator_v2_LogSelector_descriptor;
      }

      public LogSelector getDefaultInstanceForType() {
        return LogSelector.getDefaultInstance();
      }

      public LogSelector build() {
        LogSelector result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public LogSelector buildPartial() {
        LogSelector result = new LogSelector(this);
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof LogSelector) {
          return mergeFrom((LogSelector)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(LogSelector other) {
        if (other == LogSelector.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        LogSelector parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (LogSelector) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:loggregator.v2.LogSelector)
    }

    // @@protoc_insertion_point(class_scope:loggregator.v2.LogSelector)
    private static final LogSelector DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new LogSelector();
    }

    public static LogSelector getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LogSelector>
        PARSER = new com.google.protobuf.AbstractParser<LogSelector>() {
      public LogSelector parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LogSelector(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LogSelector> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<LogSelector> getParserForType() {
      return PARSER;
    }

    public LogSelector getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GaugeSelectorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:loggregator.v2.GaugeSelector)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * GaugeSelector instructs Loggregator to egress Gauge envelopes to the
   * given subscription.
   * </pre>
   *
   * Protobuf type {@code loggregator.v2.GaugeSelector}
   */
  public  static final class GaugeSelector extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:loggregator.v2.GaugeSelector)
      GaugeSelectorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GaugeSelector.newBuilder() to construct.
    private GaugeSelector(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GaugeSelector() {
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GaugeSelector(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return LoggregatorEgress.internal_static_loggregator_v2_GaugeSelector_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return LoggregatorEgress.internal_static_loggregator_v2_GaugeSelector_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              GaugeSelector.class, Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof GaugeSelector)) {
        return super.equals(obj);
      }
      GaugeSelector other = (GaugeSelector) obj;

      boolean result = true;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static GaugeSelector parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static GaugeSelector parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static GaugeSelector parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static GaugeSelector parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static GaugeSelector parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static GaugeSelector parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static GaugeSelector parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static GaugeSelector parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static GaugeSelector parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static GaugeSelector parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static GaugeSelector parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static GaugeSelector parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(GaugeSelector prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * GaugeSelector instructs Loggregator to egress Gauge envelopes to the
     * given subscription.
     * </pre>
     *
     * Protobuf type {@code loggregator.v2.GaugeSelector}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:loggregator.v2.GaugeSelector)
        GaugeSelectorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return LoggregatorEgress.internal_static_loggregator_v2_GaugeSelector_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return LoggregatorEgress.internal_static_loggregator_v2_GaugeSelector_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                GaugeSelector.class, Builder.class);
      }

      // Construct using org.cloudfoundry.loggregator.v2.LoggregatorEgress.GaugeSelector.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return LoggregatorEgress.internal_static_loggregator_v2_GaugeSelector_descriptor;
      }

      public GaugeSelector getDefaultInstanceForType() {
        return GaugeSelector.getDefaultInstance();
      }

      public GaugeSelector build() {
        GaugeSelector result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public GaugeSelector buildPartial() {
        GaugeSelector result = new GaugeSelector(this);
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof GaugeSelector) {
          return mergeFrom((GaugeSelector)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(GaugeSelector other) {
        if (other == GaugeSelector.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        GaugeSelector parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (GaugeSelector) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:loggregator.v2.GaugeSelector)
    }

    // @@protoc_insertion_point(class_scope:loggregator.v2.GaugeSelector)
    private static final GaugeSelector DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new GaugeSelector();
    }

    public static GaugeSelector getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GaugeSelector>
        PARSER = new com.google.protobuf.AbstractParser<GaugeSelector>() {
      public GaugeSelector parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GaugeSelector(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GaugeSelector> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<GaugeSelector> getParserForType() {
      return PARSER;
    }

    public GaugeSelector getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CounterSelectorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:loggregator.v2.CounterSelector)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * CounterSelector instructs Loggregator to egress Counter envelopes to the
   * given subscription
   * </pre>
   *
   * Protobuf type {@code loggregator.v2.CounterSelector}
   */
  public  static final class CounterSelector extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:loggregator.v2.CounterSelector)
      CounterSelectorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CounterSelector.newBuilder() to construct.
    private CounterSelector(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CounterSelector() {
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CounterSelector(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return LoggregatorEgress.internal_static_loggregator_v2_CounterSelector_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return LoggregatorEgress.internal_static_loggregator_v2_CounterSelector_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              CounterSelector.class, Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof CounterSelector)) {
        return super.equals(obj);
      }
      CounterSelector other = (CounterSelector) obj;

      boolean result = true;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static CounterSelector parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static CounterSelector parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static CounterSelector parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static CounterSelector parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static CounterSelector parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static CounterSelector parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static CounterSelector parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static CounterSelector parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static CounterSelector parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static CounterSelector parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static CounterSelector parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static CounterSelector parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(CounterSelector prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * CounterSelector instructs Loggregator to egress Counter envelopes to the
     * given subscription
     * </pre>
     *
     * Protobuf type {@code loggregator.v2.CounterSelector}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:loggregator.v2.CounterSelector)
        CounterSelectorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return LoggregatorEgress.internal_static_loggregator_v2_CounterSelector_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return LoggregatorEgress.internal_static_loggregator_v2_CounterSelector_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                CounterSelector.class, Builder.class);
      }

      // Construct using org.cloudfoundry.loggregator.v2.LoggregatorEgress.CounterSelector.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return LoggregatorEgress.internal_static_loggregator_v2_CounterSelector_descriptor;
      }

      public CounterSelector getDefaultInstanceForType() {
        return CounterSelector.getDefaultInstance();
      }

      public CounterSelector build() {
        CounterSelector result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public CounterSelector buildPartial() {
        CounterSelector result = new CounterSelector(this);
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof CounterSelector) {
          return mergeFrom((CounterSelector)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(CounterSelector other) {
        if (other == CounterSelector.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        CounterSelector parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (CounterSelector) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:loggregator.v2.CounterSelector)
    }

    // @@protoc_insertion_point(class_scope:loggregator.v2.CounterSelector)
    private static final CounterSelector DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new CounterSelector();
    }

    public static CounterSelector getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CounterSelector>
        PARSER = new com.google.protobuf.AbstractParser<CounterSelector>() {
      public CounterSelector parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CounterSelector(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CounterSelector> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<CounterSelector> getParserForType() {
      return PARSER;
    }

    public CounterSelector getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TimerSelectorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:loggregator.v2.TimerSelector)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * TimerSelector instructs Loggregator to egress Timer envelopes to the given
   * subscription.
   * </pre>
   *
   * Protobuf type {@code loggregator.v2.TimerSelector}
   */
  public  static final class TimerSelector extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:loggregator.v2.TimerSelector)
      TimerSelectorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TimerSelector.newBuilder() to construct.
    private TimerSelector(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TimerSelector() {
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TimerSelector(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return LoggregatorEgress.internal_static_loggregator_v2_TimerSelector_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return LoggregatorEgress.internal_static_loggregator_v2_TimerSelector_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              TimerSelector.class, Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof TimerSelector)) {
        return super.equals(obj);
      }
      TimerSelector other = (TimerSelector) obj;

      boolean result = true;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static TimerSelector parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static TimerSelector parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static TimerSelector parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static TimerSelector parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static TimerSelector parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static TimerSelector parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static TimerSelector parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static TimerSelector parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static TimerSelector parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static TimerSelector parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static TimerSelector parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static TimerSelector parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(TimerSelector prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * TimerSelector instructs Loggregator to egress Timer envelopes to the given
     * subscription.
     * </pre>
     *
     * Protobuf type {@code loggregator.v2.TimerSelector}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:loggregator.v2.TimerSelector)
        TimerSelectorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return LoggregatorEgress.internal_static_loggregator_v2_TimerSelector_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return LoggregatorEgress.internal_static_loggregator_v2_TimerSelector_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                TimerSelector.class, Builder.class);
      }

      // Construct using org.cloudfoundry.loggregator.v2.LoggregatorEgress.TimerSelector.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return LoggregatorEgress.internal_static_loggregator_v2_TimerSelector_descriptor;
      }

      public TimerSelector getDefaultInstanceForType() {
        return TimerSelector.getDefaultInstance();
      }

      public TimerSelector build() {
        TimerSelector result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public TimerSelector buildPartial() {
        TimerSelector result = new TimerSelector(this);
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof TimerSelector) {
          return mergeFrom((TimerSelector)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(TimerSelector other) {
        if (other == TimerSelector.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        TimerSelector parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (TimerSelector) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:loggregator.v2.TimerSelector)
    }

    // @@protoc_insertion_point(class_scope:loggregator.v2.TimerSelector)
    private static final TimerSelector DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new TimerSelector();
    }

    public static TimerSelector getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TimerSelector>
        PARSER = new com.google.protobuf.AbstractParser<TimerSelector>() {
      public TimerSelector parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TimerSelector(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TimerSelector> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<TimerSelector> getParserForType() {
      return PARSER;
    }

    public TimerSelector getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EventSelectorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:loggregator.v2.EventSelector)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * EventSelector instructs Loggregator to egress Event envelopes to the given
   * subscription.
   * </pre>
   *
   * Protobuf type {@code loggregator.v2.EventSelector}
   */
  public  static final class EventSelector extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:loggregator.v2.EventSelector)
      EventSelectorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EventSelector.newBuilder() to construct.
    private EventSelector(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EventSelector() {
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private EventSelector(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return LoggregatorEgress.internal_static_loggregator_v2_EventSelector_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return LoggregatorEgress.internal_static_loggregator_v2_EventSelector_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              EventSelector.class, Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof EventSelector)) {
        return super.equals(obj);
      }
      EventSelector other = (EventSelector) obj;

      boolean result = true;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static EventSelector parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static EventSelector parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static EventSelector parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static EventSelector parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static EventSelector parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static EventSelector parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static EventSelector parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static EventSelector parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static EventSelector parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static EventSelector parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static EventSelector parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static EventSelector parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(EventSelector prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * EventSelector instructs Loggregator to egress Event envelopes to the given
     * subscription.
     * </pre>
     *
     * Protobuf type {@code loggregator.v2.EventSelector}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:loggregator.v2.EventSelector)
        EventSelectorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return LoggregatorEgress.internal_static_loggregator_v2_EventSelector_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return LoggregatorEgress.internal_static_loggregator_v2_EventSelector_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                EventSelector.class, Builder.class);
      }

      // Construct using org.cloudfoundry.loggregator.v2.LoggregatorEgress.EventSelector.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return LoggregatorEgress.internal_static_loggregator_v2_EventSelector_descriptor;
      }

      public EventSelector getDefaultInstanceForType() {
        return EventSelector.getDefaultInstance();
      }

      public EventSelector build() {
        EventSelector result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public EventSelector buildPartial() {
        EventSelector result = new EventSelector(this);
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof EventSelector) {
          return mergeFrom((EventSelector)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(EventSelector other) {
        if (other == EventSelector.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        EventSelector parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (EventSelector) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:loggregator.v2.EventSelector)
    }

    // @@protoc_insertion_point(class_scope:loggregator.v2.EventSelector)
    private static final EventSelector DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EventSelector();
    }

    public static EventSelector getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EventSelector>
        PARSER = new com.google.protobuf.AbstractParser<EventSelector>() {
      public EventSelector parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EventSelector(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<EventSelector> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<EventSelector> getParserForType() {
      return PARSER;
    }

    public EventSelector getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_loggregator_v2_EgressRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_loggregator_v2_EgressRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_loggregator_v2_EgressBatchRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_loggregator_v2_EgressBatchRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_loggregator_v2_Selector_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_loggregator_v2_Selector_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_loggregator_v2_LogSelector_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_loggregator_v2_LogSelector_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_loggregator_v2_GaugeSelector_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_loggregator_v2_GaugeSelector_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_loggregator_v2_CounterSelector_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_loggregator_v2_CounterSelector_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_loggregator_v2_TimerSelector_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_loggregator_v2_TimerSelector_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_loggregator_v2_EventSelector_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_loggregator_v2_EventSelector_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\014egress.proto\022\016loggregator.v2\032\016envelope" +
      ".proto\"\235\001\n\rEgressRequest\022\020\n\010shard_id\030\001 \001" +
      "(\t\0221\n\017legacy_selector\030\002 \001(\0132\030.loggregato" +
      "r.v2.Selector\022+\n\tselectors\030\004 \003(\0132\030.loggr" +
      "egator.v2.Selector\022\032\n\022use_preferred_tags" +
      "\030\003 \001(\010\"\242\001\n\022EgressBatchRequest\022\020\n\010shard_i" +
      "d\030\001 \001(\t\0221\n\017legacy_selector\030\002 \001(\0132\030.loggr" +
      "egator.v2.Selector\022+\n\tselectors\030\004 \003(\0132\030." +
      "loggregator.v2.Selector\022\032\n\022use_preferred" +
      "_tags\030\003 \001(\010\"\230\002\n\010Selector\022\021\n\tsource_id\030\001 " +
      "\001(\t\022*\n\003log\030\002 \001(\0132\033.loggregator.v2.LogSel" +
      "ectorH\000\0222\n\007counter\030\003 \001(\0132\037.loggregator.v" +
      "2.CounterSelectorH\000\022.\n\005gauge\030\004 \001(\0132\035.log" +
      "gregator.v2.GaugeSelectorH\000\022.\n\005timer\030\005 \001" +
      "(\0132\035.loggregator.v2.TimerSelectorH\000\022.\n\005e" +
      "vent\030\006 \001(\0132\035.loggregator.v2.EventSelecto" +
      "rH\000B\t\n\007Message\"\r\n\013LogSelector\"\017\n\rGaugeSe" +
      "lector\"\021\n\017CounterSelector\"\017\n\rTimerSelect" +
      "or\"\017\n\rEventSelector2\253\001\n\006Egress\022G\n\010Receiv" +
      "er\022\035.loggregator.v2.EgressRequest\032\030.logg" +
      "regator.v2.Envelope\"\0000\001\022X\n\017BatchedReceiv" +
      "er\022\".loggregator.v2.EgressBatchRequest\032\035" +
      ".loggregator.v2.EnvelopeBatch\"\0000\001B4\n\037org" +
      ".cloudfoundry.loggregator.v2B\021Loggregato" +
      "rEgressb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          LoggregatorEnvelope.getDescriptor(),
        }, assigner);
    internal_static_loggregator_v2_EgressRequest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_loggregator_v2_EgressRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_loggregator_v2_EgressRequest_descriptor,
        new String[] { "ShardId", "LegacySelector", "Selectors", "UsePreferredTags", });
    internal_static_loggregator_v2_EgressBatchRequest_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_loggregator_v2_EgressBatchRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_loggregator_v2_EgressBatchRequest_descriptor,
        new String[] { "ShardId", "LegacySelector", "Selectors", "UsePreferredTags", });
    internal_static_loggregator_v2_Selector_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_loggregator_v2_Selector_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_loggregator_v2_Selector_descriptor,
        new String[] { "SourceId", "Log", "Counter", "Gauge", "Timer", "Event", "Message", });
    internal_static_loggregator_v2_LogSelector_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_loggregator_v2_LogSelector_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_loggregator_v2_LogSelector_descriptor,
        new String[] { });
    internal_static_loggregator_v2_GaugeSelector_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_loggregator_v2_GaugeSelector_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_loggregator_v2_GaugeSelector_descriptor,
        new String[] { });
    internal_static_loggregator_v2_CounterSelector_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_loggregator_v2_CounterSelector_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_loggregator_v2_CounterSelector_descriptor,
        new String[] { });
    internal_static_loggregator_v2_TimerSelector_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_loggregator_v2_TimerSelector_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_loggregator_v2_TimerSelector_descriptor,
        new String[] { });
    internal_static_loggregator_v2_EventSelector_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_loggregator_v2_EventSelector_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_loggregator_v2_EventSelector_descriptor,
        new String[] { });
    LoggregatorEnvelope.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
